openapi: 3.1.0
info:
  title: Authentication API
  version: 1.1.0
  description: >
    API specification for authentication mechanisms using React frontend and Express or Hono backend.
    Supports user registration, email verification, login, password reset, account deletion, logout, and other common authentication functionalities.
servers:
  - url: https://api.yourdomain.com/v1
    description: Production server
  - url: http://localhost:3000/v1
    description: Development server
tags:
  - name: Authentication
    description: Endpoints for user authentication and management
paths:
  /register:
    post:
      tags:
        - Authentication
      summary: User Registration
      description: Register a new user account. Sends a verification email upon successful registration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
            examples:
              RegisterExample:
                summary: Sample Registration Request
                value:
                  username: johndoe
                  email: johndoe@example.com
                  password: StrongP@ssw0rd
      responses:
        "201":
          description: User registered successfully. Verification email sent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                SuccessExample:
                  summary: Successful Registration
                  value:
                    message: User registered successfully. Verification email sent.
        "400":
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidInputExample:
                  summary: Invalid Input
                  value:
                    error: Invalid email format.
                    errorCode: AUTH_INVALID_INPUT
                    details: The provided email address is not valid.
        "409":
          description: User already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                UserExistsExample:
                  summary: User Already Exists
                  value:
                    error: User already exists.
                    errorCode: AUTH_USER_EXISTS
                    details: The email address is already registered.
  /verify-email:
    get:
      tags:
        - Authentication
      summary: Verify Email
      description: Verify user's email address using a token sent via email.
      parameters:
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: Email verification token.
      responses:
        "200":
          description: Email verified successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                VerifiedExample:
                  summary: Successful Email Verification
                  value:
                    message: Email verified successfully.
        "400":
          description: Invalid or expired token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidTokenExample:
                  summary: Invalid Token
                  value:
                    error: Invalid or expired token.
                    errorCode: AUTH_INVALID_TOKEN
                    details: The verification token is invalid or has expired.
        "404":
          description: Verification token not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                TokenNotFoundExample:
                  summary: Token Not Found
                  value:
                    error: Verification token not found.
                    errorCode: AUTH_TOKEN_NOT_FOUND
                    details: No verification token found for the provided token.
  /login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: Authenticate a user and issue a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            examples:
              LoginExample:
                summary: Sample Login Request
                value:
                  email: johndoe@example.com
                  password: StrongP@ssw0rd
      responses:
        "200":
          description: Successful login.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              examples:
                AuthSuccessExample:
                  summary: Successful Authentication
                  value:
                    accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    refreshToken: dGhpc2lzYXJlZnJlZXNodG9rZW4...
                    expiresIn: 3600
                    userId: 123e4567-e89b-12d3-a456-426614174000
                    username: johndoe
        "400":
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidInputExample:
                  summary: Invalid Input
                  value:
                    error: Invalid email format.
                    errorCode: AUTH_INVALID_INPUT
                    details: The provided email address is not valid.
        "401":
          description: Unauthorized. Invalid credentials or email not verified.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                UnauthorizedExample:
                  summary: Unauthorized
                  value:
                    error: Unauthorized. Invalid credentials or email not verified.
                    errorCode: AUTH_UNAUTHORIZED
                    details: The email address is not verified or the password is incorrect.
  /logout:
    post:
      tags:
        - Authentication
      summary: User Logout
      description: Invalidate the user's JWT token.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully logged out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                LogoutSuccessExample:
                  summary: Successful Logout
                  value:
                    message: Successfully logged out.
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                UnauthorizedExample:
                  summary: Unauthorized
                  value:
                    error: Unauthorized.
                    errorCode: AUTH_UNAUTHORIZED
                    details: No valid JWT token provided.
  /password-reset-request:
    post:
      tags:
        - Authentication
      summary: Password Reset Request
      description: Request a password reset email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetRequest"
            examples:
              PasswordResetRequestExample:
                summary: Sample Password Reset Request
                value:
                  email: johndoe@example.com
      responses:
        "200":
          description: Password reset email sent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                ResetEmailSentExample:
                  summary: Password Reset Email Sent
                  value:
                    message: Password reset email sent.
        "400":
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidInputExample:
                  summary: Invalid Input
                  value:
                    error: Invalid email format.
                    errorCode: AUTH_INVALID_INPUT
                    details: The provided email address is not valid.
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                UserNotFoundExample:
                  summary: User Not Found
                  value:
                    error: User not found.
                    errorCode: AUTH_USER_NOT_FOUND
                    details: No user found with the provided email address.
  /password-reset:
    post:
      tags:
        - Authentication
      summary: Password Reset
      description: Reset the user's password using a reset token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordReset"
            examples:
              PasswordResetExample:
                summary: Sample Password Reset
                value:
                  token: dGhpc2lzYXRlc3R0b2tlbg...
                  newPassword: NewStr0ngP@ssw0rd
      responses:
        "200":
          description: Password reset successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                ResetSuccessExample:
                  summary: Password Reset Successful
                  value:
                    message: Password reset successfully.
        "400":
          description: Invalid or expired reset token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidTokenExample:
                  summary: Invalid Token
                  value:
                    error: Invalid or expired reset token.
                    errorCode: AUTH_INVALID_TOKEN
                    details: The password reset token is invalid or has expired.
  /delete-account:
    delete:
      tags:
        - Authentication
      summary: Delete User Account
      description: Delete the authenticated user's account.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Account deleted successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                DeleteSuccessExample:
                  summary: Account Deleted Successfully
                  value:
                    message: Account deleted successfully.
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                UnauthorizedExample:
                  summary: Unauthorized
                  value:
                    error: Unauthorized.
                    errorCode: AUTH_UNAUTHORIZED
                    details: No valid JWT token provided.
  /profile:
    get:
      tags:
        - Authentication
      summary: Get User Profile
      description: Retrieve the authenticated user's profile information.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
              examples:
                UserProfileExample:
                  summary: Sample User Profile
                  value:
                    id: 123e4567-e89b-12d3-a456-426614174000
                    username: johndoe
                    email: johndoe@example.com
                    createdAt: 2023-01-01T12:00:00Z
                    updatedAt: 2023-06-01T12:00:00Z
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                UnauthorizedExample:
                  summary: Unauthorized
                  value:
                    error: Unauthorized.
                    errorCode: AUTH_UNAUTHORIZED
                    details: No valid JWT token provided.
  /refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh JWT Token
      description: Refresh the JWT token using a refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
            examples:
              RefreshTokenExample:
                summary: Sample Refresh Token Request
                value:
                  refreshToken: dGhpc2lzYXJlZnJlZXNodG9rZW4...
      responses:
        "200":
          description: Token refreshed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              examples:
                RefreshSuccessExample:
                  summary: Token Refreshed Successfully
                  value:
                    accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    refreshToken: dGhpc2lzYXJlZnJlZXNodG9rZW4...
                    expiresIn: 3600
                    userId: 123e4567-e89b-12d3-a456-426614174000
                    username: johndoe
        "400":
          description: Invalid refresh token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidRefreshTokenExample:
                  summary: Invalid Refresh Token
                  value:
                    error: Invalid refresh token.
                    errorCode: AUTH_INVALID_REFRESH_TOKEN
                    details: The provided refresh token is invalid.
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                UnauthorizedExample:
                  summary: Unauthorized
                  value:
                    error: Unauthorized.
                    errorCode: AUTH_UNAUTHORIZED
                    details: No valid JWT token provided.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com
        password:
          type: string
          minLength: 8
          maxLength: 30
          example: StrongP@ssw0rd
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: johndoe@example.com
        password:
          type: string
          minLength: 8
          maxLength: 30
          example: StrongP@ssw0rd
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          description: JWT refresh token.
          example: dGhpc2lzYXJlZnJlZXNodG9rZW4...
        expiresIn:
          type: integer
          description: Token expiration time in seconds.
          example: 3600
        userId:
          type: string
          description: Unique identifier for the user.
          example: 123e4567-e89b-12d3-a456-426614174000
        username:
          type: string
          description: Username of the authenticated user.
          example: johndoe
    PasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: johndoe@example.com
    PasswordReset:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          description: Password reset token.
          example: dGhpc2lzYXRlc3R0b2tlbg...
        newPassword:
          type: string
          minLength: 8
          maxLength: 30
          example: NewStr0ngP@ssw0rd
    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: JWT refresh token.
          example: dGhpc2lzYXJlZnJlZXNodG9rZW4...
    UserProfile:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user.
          example: 123e4567-e89b-12d3-a456-426614174000
        username:
          type: string
          description: Username of the user.
          example: johndoe
        email:
          type: string
          format: email
          description: Email address of the user.
          example: johndoe@example.com
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp.
          example: 2023-01-01T12:00:00Z
        updatedAt:
          type: string
          format: date-time
          description: Last profile update timestamp.
          example: 2023-06-01T12:00:00Z
    MessageResponse:
      type: object
      properties:
        message:
          type: string
          description: Operation result message.
          example: Operation completed successfully.
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message.
          example: Invalid credentials.
        errorCode:
          type: string
          description: Specific error code.
          example: AUTH_INVALID_CREDENTIALS
        details:
          type: string
          description: Additional details about the error.
          example: The provided password does not match our records.
