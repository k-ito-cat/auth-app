/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Authentication API
 * API specification for authentication mechanisms using React frontend and Express or Hono backend. Supports user registration with automatic login, email verification, login, password reset, account deletion, logout, and other common authentication functionalities. **Note:** In development and testing environments, API responses are mocked with a 3-second delay using Mock Service Worker (MSW).

 * OpenAPI spec version: 1.1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  AuthResponse,
  MessageResponse,
  UserProfile
} from './models'

export const getPostRegisterResponseMock = (overrideResponse: Partial< AuthResponse > = {}): AuthResponse => ({accessToken: faker.helpers.arrayElement([faker.word.sample(), undefined]), expiresIn: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), message: faker.helpers.arrayElement([faker.word.sample(), undefined]), refreshToken: faker.helpers.arrayElement([faker.word.sample(), undefined]), userId: faker.helpers.arrayElement([faker.word.sample(), undefined]), username: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse})

export const getGetVerifyEmailResponseMock = (overrideResponse: Partial< MessageResponse > = {}): MessageResponse => ({message: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse})

export const getPostLoginResponseMock = (overrideResponse: Partial< AuthResponse > = {}): AuthResponse => ({accessToken: faker.helpers.arrayElement([faker.word.sample(), undefined]), expiresIn: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), message: faker.helpers.arrayElement([faker.word.sample(), undefined]), refreshToken: faker.helpers.arrayElement([faker.word.sample(), undefined]), userId: faker.helpers.arrayElement([faker.word.sample(), undefined]), username: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse})

export const getPostLogoutResponseMock = (overrideResponse: Partial< MessageResponse > = {}): MessageResponse => ({message: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse})

export const getPostPasswordResetRequestResponseMock = (overrideResponse: Partial< MessageResponse > = {}): MessageResponse => ({message: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse})

export const getPostPasswordResetResponseMock = (overrideResponse: Partial< MessageResponse > = {}): MessageResponse => ({message: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse})

export const getDeleteDeleteAccountResponseMock = (overrideResponse: Partial< MessageResponse > = {}): MessageResponse => ({message: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse})

export const getGetProfileResponseMock = (overrideResponse: Partial< UserProfile > = {}): UserProfile => ({createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.helpers.arrayElement([faker.internet.email(), undefined]), id: faker.helpers.arrayElement([faker.word.sample(), undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), username: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse})

export const getPostRefreshTokenResponseMock = (overrideResponse: Partial< AuthResponse > = {}): AuthResponse => ({accessToken: faker.helpers.arrayElement([faker.word.sample(), undefined]), expiresIn: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), message: faker.helpers.arrayElement([faker.word.sample(), undefined]), refreshToken: faker.helpers.arrayElement([faker.word.sample(), undefined]), userId: faker.helpers.arrayElement([faker.word.sample(), undefined]), username: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse})


export const getPostRegisterMockHandler = (overrideResponse?: AuthResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AuthResponse> | AuthResponse)) => {
  return http.post('*/register', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostRegisterResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetVerifyEmailMockHandler = (overrideResponse?: MessageResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MessageResponse> | MessageResponse)) => {
  return http.get('*/verify-email', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetVerifyEmailResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostLoginMockHandler = (overrideResponse?: AuthResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AuthResponse> | AuthResponse)) => {
  return http.post('*/login', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostLoginResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostLogoutMockHandler = (overrideResponse?: MessageResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<MessageResponse> | MessageResponse)) => {
  return http.post('*/logout', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostLogoutResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostPasswordResetRequestMockHandler = (overrideResponse?: MessageResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<MessageResponse> | MessageResponse)) => {
  return http.post('*/password-reset-request', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostPasswordResetRequestResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostPasswordResetMockHandler = (overrideResponse?: MessageResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<MessageResponse> | MessageResponse)) => {
  return http.post('*/password-reset', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostPasswordResetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteDeleteAccountMockHandler = (overrideResponse?: MessageResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<MessageResponse> | MessageResponse)) => {
  return http.delete('*/delete-account', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteDeleteAccountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetProfileMockHandler = (overrideResponse?: UserProfile | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserProfile> | UserProfile)) => {
  return http.get('*/profile', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetProfileResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostRefreshTokenMockHandler = (overrideResponse?: AuthResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AuthResponse> | AuthResponse)) => {
  return http.post('*/refresh-token', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostRefreshTokenResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getAuthenticationAPIMock = () => [
  getPostRegisterMockHandler(),
  getGetVerifyEmailMockHandler(),
  getPostLoginMockHandler(),
  getPostLogoutMockHandler(),
  getPostPasswordResetRequestMockHandler(),
  getPostPasswordResetMockHandler(),
  getDeleteDeleteAccountMockHandler(),
  getGetProfileMockHandler(),
  getPostRefreshTokenMockHandler()]
