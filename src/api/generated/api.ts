/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * Authentication API
 * API specification for authentication mechanisms using React frontend and Express or Hono backend. Supports user registration, email verification, login, password reset, account deletion, logout, and other common authentication functionalities.

 * OpenAPI spec version: 1.1.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  AuthResponse,
  GetAuthVerifyEmailParams,
  LoginRequest,
  MessageResponse,
  PasswordReset,
  PasswordResetRequest,
  RefreshTokenRequest,
  RegisterRequest,
  UserProfile
} from './models'



  export const getAuthenticationAPI = () => {
/**
 * Register a new user account. Sends a verification email upon successful registration.
 * @summary User Registration
 */
const postAuthRegister = <TData = AxiosResponse<MessageResponse>>(
    registerRequest: RegisterRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/auth/auth/register`,
      registerRequest,options
    );
  }

/**
 * Verify user's email address using a token sent via email.
 * @summary Verify Email
 */
const getAuthVerifyEmail = <TData = AxiosResponse<MessageResponse>>(
    params: GetAuthVerifyEmailParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/auth/auth/verify-email`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Authenticate a user and issue a JWT token.
 * @summary User Login
 */
const postAuthLogin = <TData = AxiosResponse<AuthResponse>>(
    loginRequest: LoginRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/auth/auth/login`,
      loginRequest,options
    );
  }

/**
 * Invalidate the user's JWT token.
 * @summary User Logout
 */
const postAuthLogout = <TData = AxiosResponse<MessageResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/auth/auth/logout`,undefined,options
    );
  }

/**
 * Request a password reset email.
 * @summary Password Reset Request
 */
const postAuthPasswordResetRequest = <TData = AxiosResponse<MessageResponse>>(
    passwordResetRequest: PasswordResetRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/auth/auth/password-reset-request`,
      passwordResetRequest,options
    );
  }

/**
 * Reset the user's password using a reset token.
 * @summary Password Reset
 */
const postAuthPasswordReset = <TData = AxiosResponse<MessageResponse>>(
    passwordReset: PasswordReset, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/auth/auth/password-reset`,
      passwordReset,options
    );
  }

/**
 * Delete the authenticated user's account.
 * @summary Delete User Account
 */
const deleteAuthDeleteAccount = <TData = AxiosResponse<MessageResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `/auth/auth/delete-account`,options
    );
  }

/**
 * Retrieve the authenticated user's profile information.
 * @summary Get User Profile
 */
const getAuthProfile = <TData = AxiosResponse<UserProfile>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/auth/auth/profile`,options
    );
  }

/**
 * Refresh the JWT token using a refresh token.
 * @summary Refresh JWT Token
 */
const postAuthRefreshToken = <TData = AxiosResponse<AuthResponse>>(
    refreshTokenRequest: RefreshTokenRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/auth/auth/refresh-token`,
      refreshTokenRequest,options
    );
  }

return {postAuthRegister,getAuthVerifyEmail,postAuthLogin,postAuthLogout,postAuthPasswordResetRequest,postAuthPasswordReset,deleteAuthDeleteAccount,getAuthProfile,postAuthRefreshToken}};
export type PostAuthRegisterResult = AxiosResponse<MessageResponse>
export type GetAuthVerifyEmailResult = AxiosResponse<MessageResponse>
export type PostAuthLoginResult = AxiosResponse<AuthResponse>
export type PostAuthLogoutResult = AxiosResponse<MessageResponse>
export type PostAuthPasswordResetRequestResult = AxiosResponse<MessageResponse>
export type PostAuthPasswordResetResult = AxiosResponse<MessageResponse>
export type DeleteAuthDeleteAccountResult = AxiosResponse<MessageResponse>
export type GetAuthProfileResult = AxiosResponse<UserProfile>
export type PostAuthRefreshTokenResult = AxiosResponse<AuthResponse>
