/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * Authentication API
 * API specification for authentication mechanisms using React frontend and Express or Hono backend. Supports user registration with automatic login, email verification, login, password reset, account deletion, logout, and other common authentication functionalities. **Note:** In development and testing environments, API responses are mocked with a 3-second delay using Mock Service Worker (MSW).

 * OpenAPI spec version: 1.1.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  AuthResponse,
  GetVerifyEmailParams,
  LoginRequest,
  MessageResponse,
  PasswordReset,
  PasswordResetRequest,
  RefreshTokenRequest,
  RegisterRequest,
  UserProfile
} from './models'



  export const getAuthenticationAPI = () => {
/**
 * Register a new user account. Upon successful registration, the user is automatically logged in and receives authentication tokens. A verification email is also sent.
 * @summary User Registration with Automatic Login
 */
const postRegister = <TData = AxiosResponse<AuthResponse>>(
    registerRequest: RegisterRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/register`,
      registerRequest,options
    );
  }

/**
 * Verify user's email address using a token sent via email.
 * @summary Verify Email
 */
const getVerifyEmail = <TData = AxiosResponse<MessageResponse>>(
    params: GetVerifyEmailParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/v1/verify-email`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Authenticate a user and issue JWT tokens.
 * @summary User Login
 */
const postLogin = <TData = AxiosResponse<AuthResponse>>(
    loginRequest: LoginRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/login`,
      loginRequest,options
    );
  }

/**
 * Invalidate the user's JWT token.
 * @summary User Logout
 */
const postLogout = <TData = AxiosResponse<MessageResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/logout`,undefined,options
    );
  }

/**
 * Request a password reset email.
 * @summary Password Reset Request
 */
const postPasswordResetRequest = <TData = AxiosResponse<MessageResponse>>(
    passwordResetRequest: PasswordResetRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/password-reset-request`,
      passwordResetRequest,options
    );
  }

/**
 * Reset the user's password using a reset token.
 * @summary Password Reset
 */
const postPasswordReset = <TData = AxiosResponse<MessageResponse>>(
    passwordReset: PasswordReset, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/password-reset`,
      passwordReset,options
    );
  }

/**
 * Delete the authenticated user's account.
 * @summary Delete User Account
 */
const deleteDeleteAccount = <TData = AxiosResponse<MessageResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `/v1/delete-account`,options
    );
  }

/**
 * Retrieve the authenticated user's profile information.
 * @summary Get User Profile
 */
const getProfile = <TData = AxiosResponse<UserProfile>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/v1/profile`,options
    );
  }

/**
 * Refresh the JWT token using a refresh token.
 * @summary Refresh JWT Token
 */
const postRefreshToken = <TData = AxiosResponse<AuthResponse>>(
    refreshTokenRequest: RefreshTokenRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/refresh-token`,
      refreshTokenRequest,options
    );
  }

return {postRegister,getVerifyEmail,postLogin,postLogout,postPasswordResetRequest,postPasswordReset,deleteDeleteAccount,getProfile,postRefreshToken}};
export type PostRegisterResult = AxiosResponse<AuthResponse>
export type GetVerifyEmailResult = AxiosResponse<MessageResponse>
export type PostLoginResult = AxiosResponse<AuthResponse>
export type PostLogoutResult = AxiosResponse<MessageResponse>
export type PostPasswordResetRequestResult = AxiosResponse<MessageResponse>
export type PostPasswordResetResult = AxiosResponse<MessageResponse>
export type DeleteDeleteAccountResult = AxiosResponse<MessageResponse>
export type GetProfileResult = AxiosResponse<UserProfile>
export type PostRefreshTokenResult = AxiosResponse<AuthResponse>
