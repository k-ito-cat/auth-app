/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Authentication API
 * API specification for authentication mechanisms using React frontend and Express or Hono backend. Supports user registration with automatic login, email verification, login, password reset, account deletion, logout, and other common authentication functionalities. **Note:** In development and testing environments, API responses are mocked with a 3-second delay using Mock Service Worker (MSW).

 * OpenAPI spec version: 1.1.0
 */
import {
  z as zod
} from 'zod'


/**
 * Register a new user account. Upon successful registration, the user is automatically logged in and receives authentication tokens. A verification email is also sent.
 * @summary User Registration with Automatic Login
 */
export const postRegisterBodyUsernameMin = 3;

export const postRegisterBodyUsernameMax = 30;
export const postRegisterBodyPasswordMin = 8;

export const postRegisterBodyPasswordMax = 30;


export const postRegisterBody = zod.object({
  "username": zod.string().min(postRegisterBodyUsernameMin).max(postRegisterBodyUsernameMax),
  "email": zod.string().email(),
  "password": zod.string().min(postRegisterBodyPasswordMin).max(postRegisterBodyPasswordMax)
})


/**
 * Verify user's email address using a token sent via email.
 * @summary Verify Email
 */
export const getVerifyEmailQueryParams = zod.object({
  "token": zod.string()
})

export const getVerifyEmailResponse = zod.object({
  "message": zod.string().optional()
})


/**
 * Authenticate a user and issue JWT tokens.
 * @summary User Login
 */
export const postLoginBodyPasswordMin = 8;

export const postLoginBodyPasswordMax = 30;


export const postLoginBody = zod.object({
  "email": zod.string().email(),
  "password": zod.string().min(postLoginBodyPasswordMin).max(postLoginBodyPasswordMax)
})

export const postLoginResponse = zod.object({
  "message": zod.string().optional(),
  "accessToken": zod.string().optional(),
  "refreshToken": zod.string().optional(),
  "expiresIn": zod.number().optional(),
  "userId": zod.string().optional(),
  "username": zod.string().optional()
})


/**
 * Invalidate the user's JWT token.
 * @summary User Logout
 */
export const postLogoutResponse = zod.object({
  "message": zod.string().optional()
})


/**
 * Request a password reset email.
 * @summary Password Reset Request
 */
export const postPasswordResetRequestBody = zod.object({
  "email": zod.string().email()
})

export const postPasswordResetRequestResponse = zod.object({
  "message": zod.string().optional()
})


/**
 * Reset the user's password using a reset token.
 * @summary Password Reset
 */
export const postPasswordResetBodyNewPasswordMin = 8;

export const postPasswordResetBodyNewPasswordMax = 30;


export const postPasswordResetBody = zod.object({
  "token": zod.string(),
  "newPassword": zod.string().min(postPasswordResetBodyNewPasswordMin).max(postPasswordResetBodyNewPasswordMax)
})

export const postPasswordResetResponse = zod.object({
  "message": zod.string().optional()
})


/**
 * Delete the authenticated user's account.
 * @summary Delete User Account
 */
export const deleteDeleteAccountResponse = zod.object({
  "message": zod.string().optional()
})


/**
 * Retrieve the authenticated user's profile information.
 * @summary Get User Profile
 */
export const getProfileResponse = zod.object({
  "id": zod.string().optional(),
  "username": zod.string().optional(),
  "email": zod.string().email().optional(),
  "createdAt": zod.string().datetime().optional(),
  "updatedAt": zod.string().datetime().optional()
})


/**
 * Refresh the JWT token using a refresh token.
 * @summary Refresh JWT Token
 */
export const postRefreshTokenBody = zod.object({
  "refreshToken": zod.string()
})

export const postRefreshTokenResponse = zod.object({
  "message": zod.string().optional(),
  "accessToken": zod.string().optional(),
  "refreshToken": zod.string().optional(),
  "expiresIn": zod.number().optional(),
  "userId": zod.string().optional(),
  "username": zod.string().optional()
})


